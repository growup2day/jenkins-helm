persistentVolume:
  storage: 50Gi

buildBranchRegex: "feature.*|bugfix.*|hotfix.*"

JCasC:
  vault: # https://javadoc.jenkins.io/plugin/hashicorp-vault-plugin/com/datapipe/jenkins/vault/credentials/common/package-summary.html
    vaultUrl: "https://vault-preprod.nzlb.service.test:8200/"
    credentials:
      cs1-dev-openshift:
        kind: vaultStringCredentialImpl
        description: "OpenShift service account token for CS1-DEV cluster"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" .
          }}/credentials/openshift-service-account'
        scope: GLOBAL
        vaultKey: "cs1-dev-openshift"
      cs2-dev-openshift:
        kind: vaultStringCredentialImpl
        description: "OpenShift service account token for CS2-DEV cluster"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" .
          }}/credentials/openshift-service-account'
        scope: GLOBAL
        vaultKey: "cs2-dev-openshift"
  configScripts:
    multi-branch-jobs: |
      jobs:
        - script: |
            {{- .Files.Get "groovy-lib/multibranch-pipeline-helper.groovy" | nindent 6 }}
            {{- .Files.Get "groovy-lib/organization-folder-helper.groovy" | nindent 6 }}
            {{- .Files.Get "groovy-lib/pipeline-helper.groovy" | nindent 6 }}

            def displayNameSuffix = 'Feature Branches'
            def buildBranchRegex = 'feature.*|bugfix.*|hotfix.*|dev|PR-.*'
            {{- tpl $.Values.StopStartIB $ | nindent 6 }}
            {{- tpl $.Values.StopStartCSP $ | nindent 6 }}
            {{- tpl $.Values.jenkinsSlaveAnsible $ | nindent 6 }}
            {{- tpl $.Values.TrafficManagement $ | nindent 6 }}
            {{- tpl $.Values.AnsibleInventory $ | nindent 6 }}
            {{- tpl $.Values.OpsAuto $ | nindent 6 }}

    pipeline-jobs: |
      jobs:
        - script: |
            {{- .Files.Get "groovy-lib/pipeline-helper.groovy" | nindent 6 }}
            def buildBranch = 'dev'
            {{- tpl $.Values.CertificateAutomation $ | nindent 6 }}
            {{- tpl $.Values.CheckSREServices $ | nindent 6 }}
            {{- tpl $.Values.IbLibertyServices $ | nindent 6 }}


# These are all multibranch jobs
jenkinsSlaveAnsible: |
  bitbucketMultibranchPipelineJob(
    jobName: "Jenkins-slave-ansible",
    displayName: "Jenkins Slave",
    project: "DIGS",
    repo: "jenkins-slave-ansible",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    branchRegex: buildBranchRegex,
    shallowCloneDepth: 1000,
    refSpecs: '+refs/heads/master:refs/remotes/@{remote}/master',
  )

StopStartIB: |
  bitbucketMultibranchPipelineJob(
    jobName: "Start or Stop IB",
    displayName: "Stop or Start IB - " + displayNameSuffix,
    project: "DIGS",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    repo: "jenkins-jobs",
    branchRegex: buildBranchRegex,
    triggerBuildOnPush: false,
    scriptPath: "stop-start-ib/Jenkinsfile",
    shallowCloneDepth: 1000,
    refSpecs: '+refs/heads/master:refs/remotes/@{remote}/master',    
  )

StopStartCSP: |
  bitbucketMultibranchPipelineJob(
    jobName: "Start or Stop CSP",
    displayName: "Stop or Start CSP - " + displayNameSuffix,
    project: "DIGS",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    repo: "jenkins-jobs",
    branchRegex: buildBranchRegex,
    triggerBuildOnPush: false,
    scriptPath: "stop-start-csp/Jenkinsfile",
    shallowCloneDepth: 1000,
    refSpecs: '+refs/heads/master:refs/remotes/@{remote}/master',    
  )  

TrafficManagement: |
  bitbucketMultibranchPipelineJob(
    jobName: "Traffic Management",
    displayName: "Traffic Management - " + displayNameSuffix,
    project: "DIGS",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    repo: "jenkins-jobs",
    branchRegex: buildBranchRegex,
    triggerBuildOnPush: false,
    scriptPath: "traffic-management/Jenkinsfile",
    shallowCloneDepth: 1000,
    refSpecs: '+refs/heads/master:refs/remotes/@{remote}/master',    
  )  

CertificateAutomation: |
  bitbucketPipelineJob( 
    jobName: "Certificate Automation",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    gitUrl: "https://bitbucket.nz.service.anz/scm/digs/certificate-automation.git",
    branch: buildBranch,
    triggerBuildOnPush: false,
    scriptPath: "Jenkinsfile",
    shallowCloneDepth: 1,
    pollSCMSpec: null,
    parametersNeeded: true,
    stringParams: [
    [name: 'cname', desc: 'Common Name', trim: true],
    [name: 'username', desc: 'Vault Username',  trim: true]],
    passwordParams: [[name: 'password', desc: 'Vault Password']],
    choiceParams: [[name: 'process', desc: 'Select the Process', options: ['create','upload','generate','upload_generate']]]
  )

CheckSREServices: |
  bitbucketPipelineJob( 
    jobName: "Check Application Services",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    gitUrl: "https://bitbucket.nz.service.anz/scm/digs/jenkins-jobs.git",
    branch: buildBranch,
    triggerBuildOnPush: false,
    scriptPath: "check-services/Jenkinsfile",
    shallowCloneDepth: 1,
    pollSCMSpec: null,
  )

IbLibertyServices: |
  bitbucketPipelineJob( 
    jobName: "IB Liberty Services",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    gitUrl: "https://bitbucket.nz.service.anz/scm/digs/jenkins-jobs.git",
    branch: buildBranch,
    triggerBuildOnPush: false,
    scriptPath: "ib-liberty-services/Jenkinsfile",
    shallowCloneDepth: 1,
    pollSCMSpec: null,
  )

OpsAuto: |
  bitbucketMultibranchPipelineJob(
    jobName: "Ops Auto",
    displayName: "Ops Auto - " + displayNameSuffix,
    project: "DIGS",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    repo: "ops-auto",
    branchRegex: buildBranchRegex,
    triggerBuildOnPush: true,
    scriptPath: "Jenkinsfile",
    shallowCloneDepth: 1000,
    refSpecs: '+refs/heads/main:refs/remotes/@{remote}/main',
  )

AnsibleInventory: |
  bitbucketMultibranchPipelineJob(
    jobName: "Ansible Inventory",
    displayName: "Ansible Inventory - " + displayNameSuffix,
    project: "DIGS",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    repo: "ops-auto",
    branchRegex: buildBranchRegex,
    triggerBuildOnPush: true,
    scriptPath: "Jenkinsfile",
    shallowCloneDepth: 1000,
    refSpecs: '+refs/heads/main:refs/remotes/@{remote}/main',
  )