persistentVolume:
  storage: 50Gi

buildBranchRegex: "master"

JCasC:
  # Set to configure SlackNotifier plugin
  slackNotifier:
    credentialId: slack
    
  openshiftClouds:
    prod:
      serverUrl: "" # to be set by prod-cs1.yaml and prod-cs2.yaml
      namespace: "{{ .Release.Namespace }}"
      webSocket: true
      defaultsProviderTemplate: "default-jenkins-slave"
      simpleTemplates:
        templates:
          default-jenkins-slave:
            label: "prod"
            image:
              registry: ""
            useGoInit: true
            idleMinutes: ""
            envVars:
              kubernetes_backend: "{{ $.Values.JCasC.vault.mountPath }}"       

  vault: # https://javadoc.jenkins.io/plugin/hashicorp-vault-plugin/com/datapipe/jenkins/vault/credentials/common/package-summary.html
    credentials:
      cs1-prod-openshift:
        kind: vaultStringCredentialImpl
        description: "OpenShift service account token for CS1 cluster"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/openshift-service-account'
        scope: GLOBAL
        vaultKey: "cs1-prod-openshift"
      cs2-prod-openshift:
        kind: vaultStringCredentialImpl
        description: "OpenShift service account token for CS2 cluster"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/openshift-service-account'
        scope: GLOBAL
        vaultKey: "cs2-prod-openshift"


  configScripts:
    pipeline-jobs: |
      jobs:
        - script: |
            {{- .Files.Get "groovy-lib/pipeline-helper.groovy" | nindent 6 }}
            def buildBranch = '*/master'
            {{- tpl $.Values.APW_CloudManager_Pipeline_DEV $ | nindent 6 }}
            {{- tpl $.Values.APW_CloudManager_Pipeline_STAGE $ | nindent 6 }}
            {{- tpl $.Values.APW_CloudManager_Pipeline_TEST $ | nindent 6 }}

# These are all pipeline jobs
APW_CloudManager_Pipeline_DEV: |
  bitbucketPipelineJob(
    jobName: "APW CloudManager Pipeline DEV",
    credentialsId: "bitbucketsvc",
    gitUrl: "https://bitbucket.nz.service.anz/scm/apw/anz-aem-public-website---pipeline-definition.git",
    branch: buildBranch,
    scriptPath: "Jenkinsfile",
    shallowCloneDepth: 1,
    triggerBuildOnPush: false,
    pollSCMSpec: null,
    cronSpec: "H/5 * * * *",
    parametersNeeded: true,
    stringParams: [
    [name: 'PIPELINE_BUILD_ENV', defaultValue: 'dev']]
  )

APW_CloudManager_Pipeline_STAGE: |
  bitbucketPipelineJob( 
    jobName: "APW CloudManager Pipeline STAGE",
    credentialsId: "bitbucketsvc",
    gitUrl: "https://bitbucket.nz.service.anz/scm/apw/anz-aem-public-website---pipeline-definition.git",
    branch: buildBranch,
    scriptPath: "Jenkinsfile",
    shallowCloneDepth: 1,
    triggerBuildOnPush: false,
    pollSCMSpec: null,
    cronSpec: "H/5 * * * *",
    parametersNeeded: true,
    stringParams: [
    [name: 'PIPELINE_BUILD_ENV', defaultValue: 'stage']]
  )

APW_CloudManager_Pipeline_TEST: |
  bitbucketPipelineJob( 
    jobName: "APW CloudManager Pipeline TEST",
    credentialsId: "bitbucketsvc",
    gitUrl: "https://bitbucket.nz.service.anz/scm/apw/anz-aem-public-website---pipeline-definition.git",
    branch: buildBranch,
    scriptPath: "Jenkinsfile",
    shallowCloneDepth: 1,
    triggerBuildOnPush: false,
    pollSCMSpec: null,
    cronSpec: "H/5 * * * *",
    parametersNeeded: true,
    stringParams: [
    [name: 'PIPELINE_BUILD_ENV', defaultValue: 'test']]
  )
