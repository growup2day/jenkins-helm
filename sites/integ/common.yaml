podAnnotations:
  # For dynatrace
  app_name: kong-jenkins
  Support_Team: Makinui_NZ_Support
  Management_zone: Automation_Integration
  cost_centre: "89251494"
  alert_group: "Makinui_NZ_Support"
  support_contact:  "IntegrationDevTeamSyndicate@anz.com"

JCasC:
  defaultConfig: true

  adminAddress: "NZ Integration Jenkins <INTNZ@anz.com>"

  master:
    mode: NORMAL
    numExecutors: 5
    proxy:
      name: "10.38.141.33"
      port: 80
      noProxyHost: |-
        *.service.dev
        *.test
        *.anz
        *.anznb.co.nz

  quietDown:
    enableScript: true


  anzBitbucket:
    enabled: true
    manageHooks: false
    credentialsId: bitBucketUsernamePasswordCredentials

  pipelineLibraries:
    openshiftPipeline:
      repo: https://bitbucket.nz.service.anz/scm/pipe/openshift-pipeline.git
      credentialsId: bitBucketUsernamePasswordCredentials
      includeInChangesets: true

  openshiftSync:
    enabled: false

  envVars:
    ARTIFACTORY_REPOSITORY_BASE_URL: https://artifactory.nz.service.anz/artifactory
  
  vault:
    credentials:
      bitBucketUsernamePasswordCredentials:
        kind: vaultUsernamePasswordCredentialImpl
        description: "Service account for BitBucket access"
        path:
          'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/bitbucket'
        scope: GLOBAL
        usernameKey: "username"
        passwordKey: "password"

      artifactoryUsernameApiKeyCredentials:
        kind: vaultUsernamePasswordCredentialImpl
        description: "Username and API Key for Artifactory"
        path:
          'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/artifactory'
        scope: GLOBAL
        usernameKey: "artifactory_username"
        passwordKey: "artifactory_api_key"

      artifactoryStagingUsernameApiKeyCredentials:
        kind: vaultUsernamePasswordCredentialImpl
        description: "Username and API Key for Staging Artifactory"
        path:
          'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/artifactory'
        scope: GLOBAL
        usernameKey: "staging_artifactory_username"
        passwordKey: "staging_artifactory_api_key"

      devArtifactoryUsernameApiKeyCredentials:
        kind: vaultUsernamePasswordCredentialImpl
        description: "Username and API Key for Dev Artifactory"
        path:
          'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/artifactory'
        scope: GLOBAL
        usernameKey: "dev_artifactory_username"
        passwordKey: "dev_artifactory_api_key"

      testArtifactoryUsernameApiKeyCredentials:
        kind: vaultUsernamePasswordCredentialImpl
        description: "Username and API Key for test Artifactory"
        path:
          'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/artifactory'
        scope: GLOBAL
        usernameKey: "test_artifactory_username"
        passwordKey: "test_artifactory_api_key"

      proxyUsernamePasswordCredentials:
        kind: vaultUsernamePasswordCredentialImpl
        description: "Service account to access the corporate proxy"
        path:
          'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/proxy'
        scope: GLOBAL
        usernameKey: "username"
        passwordKey: "password"

      slack:
        kind: vaultStringCredentialImpl
        description: "Token for Slack Integration"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/slack'
        scope: GLOBAL
        vaultKey: "token"

      dependency-track-api-key:
        kind: vaultStringCredentialImpl
        description: "API Key to access dependency track"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/keys'
        scope: GLOBAL
        vaultKey: "dependency_track_api_key"

      checkmarx-token:
        kind: vaultStringCredentialImpl
        description: "CheckMarx token"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/checkmarx'
        scope: GLOBAL
        vaultKey: "token"

      drivetrain-shared-private-key:
        kind: vaultStringCredentialImpl
        description: "private key for Drivetrain"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/drivetrain'
        scope: GLOBAL
        vaultKey: "private_key"

      amq-dev-openshift:
        kind: vaultStringCredentialImpl
        description: "OpenShift service account token for AMQ-DEV cluster"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/keys'
        scope: GLOBAL
        vaultKey: "amq-dev-openshift"

      cs1-dev-openshift:
        kind: vaultStringCredentialImpl
        description: "OpenShift service account token for CS1-DEV cluster"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/keys'
        scope: GLOBAL
        vaultKey: "cs1-dev-openshift"

      cs2-dev-openshift:
        kind: vaultStringCredentialImpl
        description: "OpenShift service account token for CS2-DEV cluster"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/keys'
        scope: GLOBAL
        vaultKey: "cs2-dev-openshift"

  openshiftClouds:
    # explicit cloud definition for the non-prod cluster
    openshift_non_prod:
      serverUrl: "" # to be set by individual variants
      namespace: "{{ .Release.Namespace }}"
      credentialsId: "" # to be set by individual variants
      skipTlsVerify: false
      webSocket: true
    # explicit cloud definition for the 2 non-prod OCP4 clusters
    openshift_cs1_dev:
      serverUrl: "https://api.cs1-dev.nz.service.test:6443"
      namespace: "{{ .Release.Namespace }}"
      credentialsId: "cs1-dev-openshift"
      skipTlsVerify: false
      webSocket: true
    openshift_cs2_dev:
      serverUrl: "https://api.cs2-dev.nz.service.test:6443"
      namespace: "{{ .Release.Namespace }}"
      credentialsId: "cs2-dev-openshift"
      skipTlsVerify: false
      webSocket: true
    # explicit cloud definition for non-prod AMQ cluster
    openshift_amq_dev:
      serverUrl: "https://api.caas-amq.nz.service.test:6443"
      namespace: "{{ .Release.Namespace }}"
      credentialsId: "amq-dev-openshift"
      skipTlsVerify: false
      webSocket: true

  configScripts:
    anonymous-access: |
      groovy:
         - script: |
            {{- .Files.Get "groovy-lib/anonymous-access-helper.groovy" | nindent 6 }}
            setAnonymousAccess(["Overall-Read", "Job-Read"] as String[])
    appearance: |
      appearance:
        themeManager:
          theme: "darkSystem"

# displayNameSuffix, buildBranchRegex are passed in multi-branch-jobs configuration
PlatformsJobsSnippet: |
  bitbucketOrganizationFolder(
    folderName: "Integration Platforms",
    displayName: "Integration Platforms " + displayNameSuffix,
    project: "ICD",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    repoRegex: "kafka.*|kongfig.*|makinui-b2b|makinui-a2a|makinui-kong-dbless",
    branchRegex: buildBranchRegex,
  )

MakinuiB2CAuthJobsSnippet: |
  bitbucketOrganizationFolder(
    folderName: "Makinui B2C Auth",
    displayName: "Makinui B2C Auth " + displayNameSuffix,
    project: "ICD",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    repoRegex: "makinui-b2c",
    scriptPath: "JenkinsfileAuth",
    branchRegex: buildBranchRegex,
  )

MakinuiB2CUnAuthJobsSnippet: |
  bitbucketOrganizationFolder(
    folderName: "Makinui B2C Unauth",
    displayName: "Makinui B2C Unauth " + displayNameSuffix,
    project: "ICD",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    repoRegex: "makinui-b2c",
    scriptPath: "JenkinsfileUnauth",
    branchRegex: buildBranchRegex,
  )

ApiOpsSnippet: |
  bitbucketOrganizationFolder(
    folderName: "ApiOps",
    displayName: "ApiOps " + displayNameSuffix,
    project: "KONG",
    credentialsId: "bitBucketUsernamePasswordCredentials",
    repoRegex: "apiops.*",
    branchRegex: buildBranchRegex,
  )

image:
    repository: integ-cicd/jenkins-helm
