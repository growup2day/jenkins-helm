customiseRoleMapping:
  enabled: true
  mappings:
    # customise role mapping to grant user with 'view' role the ability to run and cancel jobs
    Job-Build: view,edit,admin
    Job-Cancel: view,edit,admin

JCasC:
  defaultConfig: true

  adminAddress: "NZ TSM Drivetrain <drivetrain@anz.com>"

  master:
    mode: NORMAL
    numExecutors: 5

  quietDown:
    enableScript: true

  anzBitbucket:
    enabled: true
    manageHooks: false
    credentialsId: bitbucket-credentials

  pipelineLibraries:
    cspPipeline:
      repo: https://bitbucket.nz.service.anz/scm/dig/csp-pipeline.git
      credentialsId: bitbucket-credentials
      includeInChangesets: true
    openshiftPipeline:
      repo: https://bitbucket.nz.service.anz/scm/pipe/openshift-pipeline.git
      credentialsId: bitbucket-credentials
      includeInChangesets: true

  openshiftSync:
    enabled: false

  envVars:
    ARTIFACTORY_REPOSITORY_BASE_URL: https://artifactory.nz.service.anz/artifactory

  # we updated it manually.
  vault:
    credentials:
      bitbucket-credentials:
        kind: vaultUsernamePasswordCredentialImpl
        description: "Service account for BitBucket access"
        path:
          'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/bitbucket'
        scope: GLOBAL
        usernameKey: "username"
        passwordKey: "password"
        
      drivetrain-shared-private-key:
        kind: vaultStringCredentialImpl
        description: "shared private key for authenticating to the drivetrain api"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/drivetrain-shared-private-key'
        scope: GLOBAL
        vaultKey: "token"

      artifactory-api-key:
        kind: vaultUsernamePasswordCredentialImpl
        description: "Service account for artifactory api access"
        path:
          'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/artifactory'
        scope: GLOBAL
        usernameKey: "username"
        passwordKey: "password"

      dynatrace-non-prod-api-key:
        kind: vaultStringCredentialImpl
        description: "API key for Dyntrace Non-prod"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/dynatrace'
        scope: GLOBAL
        vaultKey: "nonprod-token"

      proxyUsernamePasswordCredentials:
        kind: vaultUsernamePasswordCredentialImpl
        description: "Service account to access the corporate proxy"
        path:
          'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/proxy'
        scope: GLOBAL
        usernameKey: "username"
        passwordKey: "password"

      artifactory-staging-credentials:
        kind: vaultUsernamePasswordCredentialImpl
        description: "Service account for artifactory staging access"
        path:
          'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/artifactory'
        scope: GLOBAL
        usernameKey: "artifactory_username"
        passwordKey: "artifactory_api_key"

      pipeline-demoapp-bearer-token:
        kind: vaultStringCredentialImpl
        description: "Token for demoapp-bearer"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/bearer'
        scope: GLOBAL
        vaultKey: "token"

      pipeline-drivetrain-ui-bearer-token:
        kind: vaultStringCredentialImpl
        description: "Token for drivetrain-ui-bearer"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/bearer'
        scope: GLOBAL
        vaultKey: "token"

      pipeline-drivetrain-bearer-token:
        kind: vaultStringCredentialImpl
        description: "Token for drivetrain-bearer"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/bearer'
        scope: GLOBAL
        vaultKey: "token"

      slack-credentials:
        kind: vaultStringCredentialImpl
        description: "Token for Slack Integration"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/slack'
        scope: GLOBAL
        vaultKey: "token"

      checkmarx-token:
        kind: vaultStringCredentialImpl
        description: "CheckMarx token"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/checkmarx'
        scope: GLOBAL
        vaultKey: "token"

      dependency-track-api-key:
        kind: vaultStringCredentialImpl
        description: "API Key to access dependency track"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/dependency-track'
        scope: GLOBAL
        vaultKey: "api_key"

      cs1-dev-openshift:
        kind: vaultStringCredentialImpl
        description: "OpenShift service account token for CS1-DEV cluster"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/openshift-service-account'
        scope: GLOBAL
        vaultKey: "cs1-dev-openshift"
      cs2-dev-openshift:
        kind: vaultStringCredentialImpl
        description: "OpenShift service account token for CS2-DEV cluster"
        path: 'secret/context/{{ .Release.Namespace }}/{{ include "jenkins.serviceAccountName" . }}/credentials/openshift-service-account'
        scope: GLOBAL
        vaultKey: "cs2-dev-openshift"

  openshiftClouds:

    # OCP4 2 non-prod clusters
    openshift_cs1_dev:
      serverUrl: "https://api.cs1-dev.nz.service.test:6443"
      namespace: "drivetrain-ci"
      credentialsId: "cs1-dev-openshift"
      skipTlsVerify: false
      webSocket: true

    openshift_cs2_dev:
      serverUrl: "https://api.cs2-dev.nz.service.test:6443"
      namespace: "drivetrain-ci"
      credentialsId: "cs2-dev-openshift"
      skipTlsVerify: false
      webSocket: true

DrivetrainJobsSnippet: |
    bitbucketOrganizationFolder(
      folderName: "PP",
      displayName: "drivetrain",
      project: "PP",
      credentialsId: "bitbucket-credentials",
      repoRegex: buildRepoRegex,
      branchRegex: buildBranchRegex,
    )

DrivetrainDefinitionJobsSnippet: |
    bitbucketOrganizationFolder(
      folderName: "DD",
      displayName: "drivetrain-definitions",
      project: "DD",
      credentialsId: "bitbucket-credentials",
      repoRegex: buildRepoRegex,
      branchRegex: buildBranchRegex,
    )
